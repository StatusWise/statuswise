name: Deploy

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: write
  deployments: write
  packages: write

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io

jobs:

  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validate.outputs.should-deploy }}
      environment: ${{ steps.validate.outputs.environment }}
      image-name: ${{ steps.normalize.outputs.image-name }}
    steps:
    - name: Normalize repository name to lowercase
      id: normalize
      run: |
        IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Validate deployment target
      id: validate
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENVIRONMENT="production"
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          ENVIRONMENT="staging"
        else
          ENVIRONMENT="none"
        fi
        if [ "$ENVIRONMENT" = "none" ]; then
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        fi
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service: [backend, frontend]
    env:
      IMAGE_NAME: ${{ needs.prepare.outputs.image-name }}
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha

    - name: Build and push ${{ matrix.service }} image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ env.ENVIRONMENT }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy ${{ needs.prepare.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.should-deploy == 'true'
    env:
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
    steps:
    - name: Deploy to ${{ env.ENVIRONMENT }}
      run: |
        echo "Deploying to $ENVIRONMENT environment..."
        # Add environment-specific deployment logic here
        if [ "$ENVIRONMENT" = "staging" ]; then
          # e.g. kubectl apply -f staging
          sleep 30
        elif [ "$ENVIRONMENT" = "production" ]; then
          # Create backup before production deploy
          echo "Creating production backup..."
          # kubectl get all -n production -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml
          sleep 60
        fi

    - name: Health check
      run: |
        echo "Performing health checks..."
        if [ "$ENVIRONMENT" = "staging" ]; then
          # curl -f https://staging.statuswise.com/health || exit 1
          echo "Staging health check placeholder"
        elif [ "$ENVIRONMENT" = "production" ]; then
          # curl -f https://statuswise.com/health || exit 1
          echo "Production health check placeholder"
        fi

    - name: Smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test logic

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && needs.prepare.outputs.environment == 'production'
    steps:
    - name: Rollback production deployment
      run: |
        echo "Rolling back production deployment..."
        # Add rollback logic

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Cleanup Docker
      run: |
        echo "Cleaning up Docker resources..."
        # docker system prune -f