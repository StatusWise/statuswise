name: Automation

permissions: write-all

on:
  issues:
    types: [opened, edited, labeled, unlabeled, assigned, unassigned, closed, reopened]
  pull_request:
    types: [opened, edited, labeled, unlabeled, assigned, unassigned, closed, reopened, synchronize, ready_for_review]
  push:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  auto-label:
    name: Auto Label Issues and PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Auto label based on title and body
      uses: actions/github-script@v7
      with:
        script: |
          const isPullRequest = context.eventName === 'pull_request';
          const payload = isPullRequest ? context.payload.pull_request : context.payload.issue;
          const { title, body } = payload;
          const labels = new Set();
          
          // Label based on keywords in title and body
          const content = `${(title || '').toLowerCase()} ${(body || '').toLowerCase()}`;
          if (content.includes('bug') || content.includes('fix')) {
            labels.add('bug');
          }
          if (content.includes('feature') || content.includes('enhancement')) {
            labels.add('enhancement');
          }
          if (content.includes('documentation') || content.includes('docs')) {
            labels.add('documentation');
          }
          if (content.includes('security')) {
            labels.add('security');
          }
          if (content.includes('performance') || content.includes('perf')) {
            labels.add('performance');
          }
          
          // Label based on file changes (for PRs)
          if (isPullRequest) {
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: payload.number
            });
            
            for (const file of files) {
              if (file.filename.startsWith('backend/')) {
                labels.add('backend');
              }
              if (file.filename.startsWith('frontend/')) {
                labels.add('frontend');
              }
              if (file.filename.includes('.github/')) {
                labels.add('devops');
              }
            }
          }
          
          // Add labels if not already present
          const currentLabels = payload.labels.map(label => label.name);
          const newLabels = [...labels].filter(label => !currentLabels.includes(label));
          
          if (newLabels.length > 0) {
            await github.rest.issues.addLabels({
              issue_number: payload.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: newLabels
            });
          }

  auto-assign:
    name: Auto Assign Issues and PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    env:
      BACKEND_MAINTAINER: ${{ secrets.BACKEND_MAINTAINER }}
      FRONTEND_MAINTAINER: ${{ secrets.FRONTEND_MAINTAINER }}
      DEVOPS_MAINTAINER: ${{ secrets.DEVOPS_MAINTAINER }}
      SECURITY_MAINTAINER: ${{ secrets.SECURITY_MAINTAINER }}

    steps:
    - name: Auto assign based on labels
      uses: actions/github-script@v7
      with:
        script: |
          const labels = context.payload[context.eventName].labels.map(label => label.name);
          const assignees = [];
          
          // Define assignee mappings - use actual GitHub usernames
          // These can be configured via repository secrets or environment variables
          const assigneeMappings = {
            'backend': process.env.BACKEND_MAINTAINER || 'argakiig', // Default to repo owner
            'frontend': process.env.FRONTEND_MAINTAINER || 'argakiig',
            'devops': process.env.DEVOPS_MAINTAINER || 'argakiig',
            'security': process.env.SECURITY_MAINTAINER || 'argakiig'
          };
          
          // Assign based on labels
          for (const label of labels) {
            if (assigneeMappings[label]) {
              assignees.push(assigneeMappings[label]);
            }
          }
          
          // Only proceed if we have valid assignees
          if (assignees.length > 0) {
            // Add assignees if not already assigned
            const currentAssignees = context.payload[context.eventName].assignees.map(assignee => assignee.login);
            const newAssignees = assignees.filter(assignee => !currentAssignees.includes(assignee));
            
            if (newAssignees.length > 0) {
              try {
                await github.rest.issues.addAssignees({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  assignees: newAssignees
                });
                console.log(`Successfully assigned: ${newAssignees.join(', ')}`);
              } catch (error) {
                console.log(`Failed to assign users: ${error.message}`);
                console.log('This might be because the users are not valid GitHub usernames or do not have access to this repository.');
              }
            }
          } else {
            console.log('No valid assignees found for the current labels.');
          }

  stale-issues:
    name: Mark Stale Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Mark stale issues
      uses: actions/stale@v8
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: |
          This issue has been automatically marked as stale because it has not had recent activity.
          It will be closed if no further activity occurs. Thank you for your contributions.
        stale-issue-label: 'no-remove'
        stale-pr-message: |
          This pull request has been automatically marked as stale because it has not had recent activity.
          It will be closed if no further activity occurs. Thank you for your contributions.
        stale-pr-label: 'no-remove'
        days-before-stale: 30
        exempt-issue-labels: 'pinned,security,bug,enhancement'
        exempt-pr-labels: 'pinned,security,bug,enhancement'
        exempt-all-milestones: true

  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const { additions, deletions } = context.payload.pull_request;
          const totalChanges = additions + deletions;
          
          let comment = '## üìä PR Analysis\n\n';
          comment += `**Changes**: +${additions} -${deletions} (${totalChanges} total)\n\n`;
          
          if (totalChanges > 1000) {
            comment += '‚ö†Ô∏è **Large PR detected** - Consider breaking this into smaller, more manageable PRs.\n\n';
          }
          
          if (additions > deletions * 3) {
            comment += '‚ö†Ô∏è **High addition-to-deletion ratio** - Consider if all additions are necessary.\n\n';
          }
          
          comment += '### üìã Checklist\n\n';
          comment += '- [ ] Code follows project style guidelines\n';
          comment += '- [ ] Tests added/updated\n';
          comment += '- [ ] Documentation updated\n';
          comment += '- [ ] No breaking changes (or breaking changes documented)\n';
          comment += '- [ ] Security considerations addressed\n\n';
          comment += '---\n';
          comment += '*This analysis was automatically generated*';
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 