name: Compatibility Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [labeled]
  schedule:
    - cron: '0 6 * * 0'  # Weekly on Sunday at 6 AM UTC

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Python compatibility testing (backend)
  python-compatibility:
    name: Python v${{ matrix.python-version }}
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && github.event.label.name == 'run-compat-tests')
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: statuswise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install PostgreSQL client tools
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install dependencies
      run: make install-backend

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Run backend tests with proper isolation
      run: make test-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/statuswise_test
        JWT_SECRET: test_secret_key
        LEMONSQUEEZY_API_KEY: test_key
        LEMONSQUEEZY_SIGNING_SECRET: test_secret
        LEMONSQUEEZY_PRO_VARIANT_ID: test_variant

  # Node.js compatibility testing (frontend)
  nodejs-compatibility:
    name: Node.js v${{ matrix.node-version }}
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && github.event.label.name == 'run-compat-tests')
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        node-version: ['18', '20']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: make install-frontend

    - name: Run frontend tests
      run: cd frontend && npm run test
      env:
        CI: true

  # Database compatibility testing
  database-compatibility:
    name: PostgreSQL v${{ matrix.postgres-version }}
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && github.event.label.name == 'run-compat-tests')
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        postgres-version: ['13', '14', '15', '16']

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: statuswise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install PostgreSQL client tools
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install dependencies
      run: make install-backend

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Run database migration tests
      run: |
        cd backend
        python -c "from database import engine; from models import Base; Base.metadata.create_all(bind=engine)"
        echo "Database initialized, running tests with proper isolation..."
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/statuswise_test
        JWT_SECRET: test_secret_key
        LEMONSQUEEZY_API_KEY: test_key
        LEMONSQUEEZY_SIGNING_SECRET: test_secret
        LEMONSQUEEZY_PRO_VARIANT_ID: test_variant

    - name: Run backend tests with proper isolation
      run: make test-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/statuswise_test
        JWT_SECRET: test_secret_key
        LEMONSQUEEZY_API_KEY: test_key
        LEMONSQUEEZY_SIGNING_SECRET: test_secret
        LEMONSQUEEZY_PRO_VARIANT_ID: test_variant

  # Integration and performance testing
  integration-tests:
    name: Integration & Performance Tests
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && github.event.label.name == 'run-compat-tests')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test with Docker Compose
      run: |
        # Copy environment files
        cp backend/env.example backend/.env
        cp frontend/env.example frontend/.env
        
        # Build and start services
        docker compose build
        docker compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 45
        
        # Health checks
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
        # Basic integration tests
        echo "Running integration tests..."
        curl -X POST http://localhost:8000/signup \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"testpass123"}' || exit 1
        
        echo "✅ Integration tests passed!"

    - name: Performance tests
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Running basic performance tests..."
        # Install performance testing tools
        pip install locust
        
        # Run lightweight performance test
        cd backend
        timeout 60 locust -f tests/performance_test.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8000 || true
        
        echo "✅ Performance tests completed!"

    - name: Cleanup
      if: always()
      run: |
        docker compose down
        docker system prune -f

  # Summary job
  compatibility-summary:
    name: Compatibility Test Summary
    runs-on: ubuntu-latest
    needs: [python-compatibility, nodejs-compatibility, database-compatibility, integration-tests]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🧪 Compatibility Test Results" >> $GITHUB_STEP_SUMMARY
        echo "### Python Tests: ${{ needs.python-compatibility.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Node.js Tests: ${{ needs.nodejs-compatibility.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Database Tests: ${{ needs.database-compatibility.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.python-compatibility.result }}" == "success" && 
              "${{ needs.nodejs-compatibility.result }}" == "success" && 
              "${{ needs.database-compatibility.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ All compatibility tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some compatibility tests failed" >> $GITHUB_STEP_SUMMARY
        fi