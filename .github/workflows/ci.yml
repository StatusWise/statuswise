name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Use reusable setup workflow
  setup:
    name: Environment Setup
    uses: ./.github/workflows/reusable-setup.yml
    with:
      setup-python: true
      python-version: '3.11'
      setup-node: true
      node-version: '18'
      setup-postgres: true
      install-dependencies: 'both'
      cache-key-suffix: 'ci'

  # Consolidated backend testing and linting
  backend:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    needs: setup
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: statuswise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies (cached)
      run: make install-backend

    - name: Run linting (flake8, black, isort)
      run: |
        echo "🔍 Running comprehensive backend linting..."
        cd backend
        echo "Running flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=88 --statistics
        echo "Running black..."
        black --check --diff .
        echo "Running isort..."
        isort --check-only --diff .
        echo "✅ All backend linting passed!"

    - name: Run backend tests with coverage
      run: make ci-test-backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/statuswise_test
        JWT_SECRET: test_secret_key
        LEMONSQUEEZY_API_KEY: test_key
        LEMONSQUEEZY_SIGNING_SECRET: test_secret
        LEMONSQUEEZY_PRO_VARIANT_ID: test_variant

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Security scan (Bandit)
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
      continue-on-error: true

  # Consolidated frontend testing and linting  
  frontend:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    needs: setup

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies (cached)
      run: make install-frontend

    - name: Run linting (ESLint)
      run: |
        echo "🔍 Running frontend linting..."
        cd frontend
        npm run lint
        echo "✅ Frontend linting passed!"

    - name: Run frontend tests with coverage
      run: make ci-test-frontend
      env:
        CI: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build check
      run: |
        echo "🏗️ Verifying production build..."
        cd frontend
        npm run build
        echo "✅ Production build successful!"

  # Quality gates and summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "## 🎯 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Status: ${{ needs.backend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Status: ${{ needs.frontend.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend.result }}" == "success" && "${{ needs.frontend.result }}" == "success" ]]; then
          echo "✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready for deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Quality gate failed" >> $GITHUB_STEP_SUMMARY
          echo "🔧 Please fix the issues above" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
